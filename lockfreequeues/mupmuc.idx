NoConsumerIdx	lockfreequeues/mupmuc.html#NoConsumerIdx	mupmuc: NoConsumerIdx	
NoConsumersAvailableDefect	lockfreequeues/mupmuc.html#NoConsumersAvailableDefect	mupmuc: NoConsumersAvailableDefect	
Mupmuc	lockfreequeues/mupmuc.html#Mupmuc	mupmuc: Mupmuc	
Consumer	lockfreequeues/mupmuc.html#Consumer	mupmuc: Consumer	
initMupmuc	lockfreequeues/mupmuc.html#initMupmuc	mupmuc: initMupmuc[N, P, C: static int; T](): Mupmuc[N, P, C, T]	
getConsumer	lockfreequeues/mupmuc.html#getConsumer,Mupmuc[N,P,C,T],int	mupmuc: getConsumer[N, P, C: static int; T](self: var Mupmuc[N, P, C, T];\n                                    idx: int = NoConsumerIdx): Consumer[N, P, C,\n    T]	
pop	lockfreequeues/mupmuc.html#pop,Consumer[N,P,C,T]	mupmuc: pop[N, P, C: static int; T](self: Consumer[N, P, C, T]): Option[T]	
pop	lockfreequeues/mupmuc.html#pop,Consumer[N,P,C,T],int	mupmuc: pop[N, P, C: static int; T](self: Consumer[N, P, C, T]; count: int): Option[\n    seq[T]]	
pop	lockfreequeues/mupmuc.html#pop,Mupmuc[N,P,C,T]	mupmuc: pop[N, P, C: static int; T](self: var Mupmuc[N, P, C, T]): bool	
pop	lockfreequeues/mupmuc.html#pop,Mupmuc[N,P,C,T],int	mupmuc: pop[N, P, C: static int; T](self: var Mupmuc[N, P, C, T]; count: int): Option[\n    seq[T]]	
consumerCount	lockfreequeues/mupmuc.html#consumerCount,Mupmuc[N,P,C,T]	mupmuc: consumerCount[N, P, C: static int; T](self: var Mupmuc[N, P, C, T]): int	
