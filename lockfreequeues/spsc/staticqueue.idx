StaticQueue	lockfreequeues/spsc/staticqueue.html#StaticQueue	staticqueue: StaticQueue	
newSPSCQueue	lockfreequeues/spsc/staticqueue.html#newSPSCQueue	staticqueue: newSPSCQueue[N: static int; T](): StaticQueue[N, T]	
push	lockfreequeues/spsc/staticqueue.html#push,StaticQueue[N,T],T	staticqueue: push[N: static int; T](self: var StaticQueue[N, T]; item: T): bool	
push	lockfreequeues/spsc/staticqueue.html#push,StaticQueue[N,T],openArray[T]	staticqueue: push[N: static int; T](self: var StaticQueue[N, T]; items: openArray[T]): Option[seq[T]]	
pop	lockfreequeues/spsc/staticqueue.html#pop,StaticQueue[N,T]	staticqueue: pop[N: static int; T](self: var StaticQueue[N, T]): Option[T]	
pop	lockfreequeues/spsc/staticqueue.html#pop,StaticQueue[N,T],int	staticqueue: pop[N: static int; T](self: var StaticQueue[N, T]; count: int): Option[seq[T]]	
capacity	lockfreequeues/spsc/staticqueue.html#capacity,StaticQueue[N,T]	staticqueue: capacity[N: static int; T](self: var StaticQueue[N, T]): int	
state	lockfreequeues/spsc/staticqueue.html#state,StaticQueue[N,T]	staticqueue: state[N: static int; T](self: var StaticQueue[N, T]): tuple[head: uint, tail: uint,\n    storage: seq[T]]	
move	lockfreequeues/spsc/staticqueue.html#move,StaticQueue[N,T],uint,uint	staticqueue: move[N: static int; T](self: var StaticQueue[N, T]; head: uint; tail: uint)	
reset	lockfreequeues/spsc/staticqueue.html#reset,StaticQueue[N,T]	staticqueue: reset[N: static int; T](self: var StaticQueue[N, T])	
