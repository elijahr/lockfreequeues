NoProducerIdx	lockfreequeues/mupsic.html#NoProducerIdx	mupsic: NoProducerIdx	
NoProducersAvailableDefect	lockfreequeues/mupsic.html#NoProducersAvailableDefect	mupsic: NoProducersAvailableDefect	
InvalidCallDefect	lockfreequeues/mupsic.html#InvalidCallDefect	mupsic: InvalidCallDefect	
Mupsic	lockfreequeues/mupsic.html#Mupsic	mupsic: Mupsic	
Producer	lockfreequeues/mupsic.html#Producer	mupsic: Producer	
initMupsic	lockfreequeues/mupsic.html#initMupsic	mupsic: initMupsic[N, P: static int; T](): Mupsic[N, P, T]	
getProducer	lockfreequeues/mupsic.html#getProducer,Mupsic[N,P,T],int	mupsic: getProducer[N, P: static int; T](self: var Mupsic[N, P, T]; idx: int = NoProducerIdx): Producer[\n    N, P, T]	
push	lockfreequeues/mupsic.html#push,Producer[N,P,T],T	mupsic: push[N, P: static int; T](self: Producer[N, P, T]; item: T): bool	
push	lockfreequeues/mupsic.html#push,Producer[N,P,T],openArray[T]	mupsic: push[N, P: static int; T](self: Producer[N, P, T]; items: openArray[T]): Option[\n    HSlice[int, int]]	
push	lockfreequeues/mupsic.html#push,Mupsic[N,P,T],T	mupsic: push[N, P: static int; T](self: var Mupsic[N, P, T]; item: T): bool	
push	lockfreequeues/mupsic.html#push,Mupsic[N,P,T],openArray[T]	mupsic: push[N, P: static int; T](self: var Mupsic[N, P, T]; items: openArray[T]): Option[\n    HSlice[int, int]]	
capacity	lockfreequeues/mupsic.html#capacity,Mupsic[N,P,T]	mupsic: capacity[N, P: static int; T](self: var Mupsic[N, P, T]): int	
producerCount	lockfreequeues/mupsic.html#producerCount,Mupsic[N,P,T]	mupsic: producerCount[N, P: static int; T](self: var Mupsic[N, P, T]): int	
